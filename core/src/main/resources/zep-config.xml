<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <context:annotation-config/>
    <context:component-scan base-package="org.zenoss.zep"/>

    <bean id="scheduler" class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">
        <property name="poolSize" value="10" />
        <property name="threadNamePrefix" value="ZEP-SCHEDULER"/>
    </bean>

    <bean id="rejectedExecutionHandler" class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy">
    </bean>

    <bean id="queueExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean">
        <property name="corePoolSize" value="${zep.executor.core_pool_size:#{T(java.lang.Runtime).getRuntime().availableProcessors()}}" />
        <property name="maxPoolSize" value="${zep.executor.max_pool_size:#{T(java.lang.Runtime).getRuntime().availableProcessors()}}" />
        <property name="threadNamePrefix" value="ZEP" />
        <property name="waitForTasksToCompleteOnShutdown" value="true" />
        <property name="queueCapacity" value="${zep.executor.queue_capacity:10}" />
        <property name="rejectedExecutionHandler" ref="rejectedExecutionHandler" />
    </bean>

    <!-- CFG -->
    <import resource="zep-config-cfg.xml"/>

    <!-- DAO -->
    <import resource="zep-config-daos.xml"/>

    <!-- REST -->
    <import resource="zep-config-rest.xml"/>

    <bean id="pluginService" class="org.zenoss.zep.impl.PluginServiceImpl">
        <constructor-arg index="0" ref="zepConfig" />
        <constructor-arg index="1" value="${zep.plugins.external.disabled:false}" />
    </bean>

    <bean id="eventFanOutPlugin" class="org.zenoss.zep.impl.EventFanOutPlugin">
        <property name="amqpConnectionManager" ref="amqpConnectionManager"/>
    </bean>

    <bean id="eventProcessor" class="org.zenoss.zep.impl.EventProcessorImpl">
        <property name="pluginService" ref="pluginService"/>
        <property name="eventSummaryDao" ref="eventSummaryDao"/>
    </bean>

    <bean id="eventPublisher" class="org.zenoss.zep.impl.EventPublisherImpl">
        <property name="amqpConnectionManager" ref="amqpConnectionManager" />
    </bean>

    <bean id="eventQueueListener" class="org.zenoss.zep.impl.RawEventQueueListener"
          depends-on="application">
        <property name="executorService" ref="queueExecutor" />
        <property name="eventProcessor" ref="eventProcessor"/>
    </bean>

    <bean id="modelChangeEventQueueListener" class="org.zenoss.zep.impl.ModelChangeEventQueueListener"
          depends-on="application">
        <property name="executorService" ref="queueExecutor" />
        <property name="eventSummaryDao" ref="eventSummaryDao"/>
    </bean>

    <bean id="heartbeatListener" class="org.zenoss.zep.impl.HeartbeatListener" depends-on="application">
        <property name="executorService" ref="queueExecutor" />
        <property name="heartbeatDao" ref="heartbeatDao" />
    </bean>

    <bean id="migratedEventQueueListenerSummary" class="org.zenoss.zep.impl.MigratedEventQueueListener"
          depends-on="application">
        <constructor-arg index="0" value="$ZepMigratedEventSummary" />
        <property name="executorService" ref="queueExecutor" />
        <property name="eventSummaryBaseDao" ref="eventSummaryDao" />
    </bean>

    <bean id="migratedEventQueueListenerArchive" class="org.zenoss.zep.impl.MigratedEventQueueListener"
          depends-on="application">
        <constructor-arg index="0" value="$ZepMigratedEventArchive" />
        <property name="executorService" ref="queueExecutor" />
        <property name="eventSummaryBaseDao" ref="eventArchiveDao" />
    </bean>
    
    <bean id="heartbeatProcessor" class="org.zenoss.zep.impl.HeartbeatProcessorImpl">
        <property name="eventPublisher" ref="eventPublisher" />
        <property name="heartbeatDao" ref="heartbeatDao" />
        <property name="eventIndexDao" ref="eventSummaryIndexDao" />
        <property name="uuidGenerator" ref="uuidGenerator" />
    </bean>

    <bean id="amqpServerUri" class="org.zenoss.amqp.AmqpServerUri" factory-method="createFromGlobalConf">
        <constructor-arg index="0" ref="globalConf"/>
        <constructor-arg index="1" value="${zep.amqp.uri}"/>
    </bean>

    <bean id="amqpConnectionManager" class="org.zenoss.amqp.AmqpConnectionManager" init-method="init">
        <constructor-arg index="0" ref="amqpServerUri"/>
        <constructor-arg index="1" value="${zep.amqp.retry}"/>
    </bean>

    <bean id="application" class="org.zenoss.zep.impl.Application" destroy-method="shutdown"
          depends-on="amqpConnectionManager">
        <property name="configDao" ref="configDao"/>
        <property name="amqpConnectionManager" ref="amqpConnectionManager" />
        <property name="eventStoreDao" ref="eventStoreDao"/>
        <property name="eventArchiveDao" ref="eventArchiveDao"/>
        <property name="eventTimeDao" ref="eventTimeDao"/>
        <property name="eventSummaryIndexer" ref="eventSummaryIndexer"/>
        <property name="eventSummaryRebuilder" ref="eventSummaryIndexRebuilder"/>
        <property name="eventArchiveIndexer" ref="eventArchiveIndexer"/>
        <property name="eventArchiveRebuilder" ref="eventArchiveIndexRebuilder"/>
        <property name="heartbeatProcessor" ref="heartbeatProcessor" />
        <property name="heartbeatIntervalSeconds" value="${zep.heartbeat.interval_seconds:60}" />
        <property name="pluginService" ref="pluginService" />
        <property name="queueExecutor" ref="queueExecutor" />
        <property name="scheduler" ref="scheduler" />
        <property name="agingIntervalMilliseconds" value="${zep.aging.interval_milliseconds:60000}" />
        <property name="agingLimit" value="${zep.aging.limit:100}" />
        <property name="archiveIntervalMilliseconds" value="${zep.archive.interval_milliseconds:60000}" />
        <property name="archiveLimit" value="${zep.archive.limit:100}" />
        <property name="dbMaintenanceService" ref="dbMaintenanceService" />
        <property name="dbMaintenanceIntervalMinutes" value="${zep.database.optimize_minutes:60}" />
    </bean>

    <bean id="triggerPlugin" class="org.zenoss.zep.impl.TriggerPlugin">
        <property name="triggerDao" ref="eventTriggerDao"/>
        <property name="signalSpoolDao" ref="eventSignalSpoolDao"/>
        <property name="eventSummaryDao" ref="eventSummaryDao"/>
        <property name="eventTriggerSubscriptionDao" ref="eventTriggerSubscriptionDao"/>
        <property name="connectionManager" ref="amqpConnectionManager"/>
        <property name="eventStoreDao" ref="eventStoreDao"/>
    </bean>

    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basenames">
            <array>
                <value>org.zenoss.zep.messages</value>
            </array>
        </property>
    </bean>

    <bean id="messages" class="org.zenoss.zep.Messages">
        <constructor-arg ref="messageSource"/>
    </bean>

    <bean id="uuidGenerator" class="org.zenoss.zep.impl.UUIDGeneratorImpl">
    </bean>

    <!-- Framework for MBeans support -->
    <!--
    <bean id="mbeanServer" class="org.springframework.jmx.support.MBeanServerFactoryBean">
        <property name="locateExistingServerIfPossible" value="true"/>
    </bean>

    <bean id="exporter" class="org.springframework.jmx.export.MBeanExporter" lazy-init="false">
        <property name="server" ref="mbeanServer"/>
        <property name="autodetect" value="true"/>
        <property name="beans">
            <map>
            </map>
        </property>
    </bean>
    -->

</beans>
